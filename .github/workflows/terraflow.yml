name: Build and Push Docker Image

on:
  push:
    branches:
      - main
      - release
      - "**"
  workflow_dispatch:

# Ajout des permissions nécessaires
permissions:
  id-token: write
  contents: read

jobs:
  build-and-push-batch:
    runs-on: ubuntu-latest
    # Définissez l'environnement en premier
    environment: ${{ github.ref == 'refs/heads/main' && 'prd' || github.ref == 'refs/heads/release' && 'ppr' || 'rec' }}

    env:
      BATCH_NAME: test
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prd' || github.ref == 'refs/heads/release' && 'ppr' || 'rec' }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Déterminer l'URL ACR en fonction de l'environnement
      - name: Set ACR URL based on environment
        id: set-acr-url
        run: |
          if [ "$ENVIRONMENT" = "prd" ]; then
            echo "ACR_URL=${{ secrets.AZURE_CONTAINER_REGISTRY_URL_PRD }}" >> $GITHUB_ENV
            echo "ACR_NAME=$(echo ${{ secrets.AZURE_CONTAINER_REGISTRY_URL_PRD }} | cut -d'.' -f1)" >> $GITHUB_ENV
          elif [ "$ENVIRONMENT" = "ppr" ]; then
            echo "ACR_URL=${{ secrets.AZURE_CONTAINER_REGISTRY_URL_PPR }}" >> $GITHUB_ENV
            echo "ACR_NAME=$(echo ${{ secrets.AZURE_CONTAINER_REGISTRY_URL_PPR }} | cut -d'.' -f1)" >> $GITHUB_ENV
          else
            echo "ACR_URL=${{ secrets.AZURE_CONTAINER_REGISTRY_URL_REC }}" >> $GITHUB_ENV
            echo "ACR_NAME=$(echo ${{ secrets.AZURE_CONTAINER_REGISTRY_URL_REC }} | cut -d'.' -f1)" >> $GITHUB_ENV
          fi

      # Configuration de Docker avec authentification directe à ACR
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      # Utiliser l'action docker/login-action pour se connecter directement à ACR avec SP
      - name: Login to Azure Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_URL }}
          username: ${{ secrets.TF_ARM_CLIENT_ID }}
          password: ${{ secrets.TF_ARM_CLIENT_SECRET }}

      # Vérifier que le dossier batch_test existe
      - name: Check batch directory
        run: |
          ls -la ./
          if [ -d "./batch_${{ env.BATCH_NAME }}" ]; then
            echo "Batch directory exists"
            ls -la ./batch_${{ env.BATCH_NAME }}/
          else
            echo "ERROR: Batch directory not found!"
            exit 1
          fi

      # Construction et push
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./batch_${{ env.BATCH_NAME }}
          push: true
          tags: |
            ${{ env.ACR_URL }}/batch-${{ env.BATCH_NAME }}:${{ env.ENVIRONMENT }}
            ${{ env.ACR_URL }}/batch-${{ env.BATCH_NAME }}:${{ env.ENVIRONMENT }}-${{ github.sha }}
          file: ./batch_${{ env.BATCH_NAME }}/Dockerfile