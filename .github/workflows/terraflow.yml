name: Build and Push Batch Docker Images

on:
  push:
    branches:
      - main
      - release
      - "**"
  workflow_dispatch:

# Ajout des permissions nécessaires pour l'authentification Azure
permissions:
  id-token: write
  contents: read

jobs:
  find-batch-dirs:
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Find batch directories
        id: set-matrix
        run: |
          # Trouver tous les dossiers commençant par batch_
          BATCH_DIRS=$(find . -maxdepth 1 -type d -name "batch_*" -printf "%f\n")
          # Créer la matrice JSON
          MATRIX="{\"include\":["
          while IFS= read -r dir; do
            if [ ! -z "$dir" ]; then
              BATCH_NAME="${dir#batch_}"
              MATRIX="$MATRIX{\"batch_dir\":\"$dir\",\"batch_name\":\"$BATCH_NAME\"},"
            fi
          done <<< "$BATCH_DIRS"
          # Enlever la dernière virgule et fermer le JSON
          MATRIX="${MATRIX%,}]}"
          echo "matrix=$MATRIX" >> $GITHUB_OUTPUT

  build-and-push:
    needs: find-batch-dirs
    runs-on: ubuntu-latest
    strategy:
      matrix: ${{ fromJson(needs.find-batch-dirs.outputs.matrix) }}
    
    # Définir l'environnement selon la branche
    environment: ${{ github.ref == 'refs/heads/main' && 'prd' || github.ref == 'refs/heads/release' && 'ppr' || 'rec' }}
    
    env:
      ENVIRONMENT: ${{ github.ref == 'refs/heads/main' && 'prd' || github.ref == 'refs/heads/release' && 'ppr' || 'rec' }}
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      # Vérifier que le Dockerfile existe
      - name: Check for Dockerfile
        id: check_dockerfile
        run: |
          if [ -f "${{ matrix.batch_dir }}/Dockerfile" ]; then
            echo "dockerfile_exists=true" >> $GITHUB_OUTPUT
          else
            echo "dockerfile_exists=false" >> $GITHUB_OUTPUT
            echo "Warning: No Dockerfile found in ${{ matrix.batch_dir }}. Skipping build."
          fi

      # Déterminer l'URL ACR en fonction de l'environnement
      - name: Set ACR URL based on environment
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        id: set-acr-url
        run: |
          if [ "$ENVIRONMENT" = "prd" ]; then
            echo "ACR_URL=${{ secrets.AZURE_CONTAINER_REGISTRY_URL_PRD }}" >> $GITHUB_ENV
          elif [ "$ENVIRONMENT" = "ppr" ]; then
            echo "ACR_URL=${{ secrets.AZURE_CONTAINER_REGISTRY_URL_PPR }}" >> $GITHUB_ENV
          else
            echo "ACR_URL=${{ secrets.AZURE_CONTAINER_REGISTRY_URL_REC }}" >> $GITHUB_ENV
          fi
          
          # Extraire le nom de l'ACR de l'URL (sans .azurecr.io)
          ACR_NAME=$(echo "${{ secrets.AZURE_CONTAINER_REGISTRY_URL_REC }}" | cut -d'.' -f1)
          echo "ACR_NAME=$ACR_NAME" >> $GITHUB_ENV

      # Méthode 1: Utiliser docker/login-action avec les Service Principal credentials
      - name: Login to ACR with Service Principal
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.ACR_URL }}
          username: ${{ secrets.TF_ARM_CLIENT_ID }}
          password: ${{ secrets.TF_ARM_CLIENT_SECRET }}

      # Configurer Docker
      - name: Set up Docker Buildx
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/setup-buildx-action@v3

      # Construction et push de l'image Docker
      - name: Build and push Docker image
        if: steps.check_dockerfile.outputs.dockerfile_exists == 'true'
        uses: docker/build-push-action@v5
        with:
          context: ./${{ matrix.batch_dir }}
          push: true
          tags: |
            ${{ env.ACR_URL }}/batch-${{ matrix.batch_name }}:${{ env.ENVIRONMENT }}
            ${{ env.ACR_URL }}/batch-${{ matrix.batch_name }}:${{ env.ENVIRONMENT }}-${{ github.sha }}
          file: ./${{ matrix.batch_dir }}/Dockerfile